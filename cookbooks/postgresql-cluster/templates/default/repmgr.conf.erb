###################################################
# Replication Manager sample configuration file
###################################################

# Required configuration items
# ============================
#
# repmgr and repmgrd require these items to be configured:

# Cluster name - this will be used by repmgr to generate its internal
# schema (pattern: "repmgr_{cluster}"); while this name will be quoted
# to preserve case, we recommend using lower case and avoiding whitespace
# to facilitate easier querying of the repmgr views and tables.
cluster=<%= node['postgresql-cluster']['cluster_name'] %>

# Node ID and name
# (Note: we recommend to avoid naming nodes after their initial
#  replication funcion, as this will cause confusion when e.g.
#  "standby2" is promoted to master)
node=<%= @node_id %>
node_name=<%= node.name %>

# Database connection information
conninfo='host=<%= node.name %> dbname=<%= node['postgresql-cluster']['repmgr']['db_name'] %> user=<%= node['postgresql-cluster']['repmgr']['db_user'] %> password=<%= node['postgresql-cluster']['repmgr']['db_password'] %>'

# Optional configuration items
# ============================

# Replication settings
# ---------------------

# when using cascading replication and a standby is to be connected to an
# upstream standby, specify that node's ID with 'upstream_node'. The node
# must exist before the new standby can be registered. If a standby is
# to connect directly to a master node, this parameter is not required.
#
# upstream_node=1

# physical replication slots - PostgreSQL 9.4 and later only
# (default: 0)
#
use_replication_slots=1


# Logging and monitoring settings
# -------------------------------

# Log level: possible values are DEBUG, INFO, NOTICE, WARNING, ERR, ALERT, CRIT or EMERG
# (default: NOTICE)
loglevel=NOTICE

# Logging facility: possible values are STDERR or - for Syslog integration - one of LOCAL0, LOCAL1, ..., LOCAL7, USER
# (default: STDERR)
#logfacility=STDERR

# stderr can be redirected to an arbitrary file:
#
#logfile='/var/log/repmgr/repmgr-9.4.log'

# event notifications can be passed to an arbitrary external program
# together with the following parameters:
#
#   %n - node ID
#   %e - event type
#   %s - success (1 or 0)
#   %t - timestamp
#   %d - details
#
# the values provided for "%t" and "%d" will probably contain spaces,
# so should be quoted in the provided command configuration, e.g.:
#
# event_notification_command='/path/to/some/script %n %e %s "%t" "%d"'

# By default, all notifications will be passed; the notification types
# can be filtered to explicitly named ones:
#
# event_notifications=master_register,standby_register,witness_create


# Environment/command settings
# ----------------------------

# path to PostgreSQL binary directory (location of pg_ctl, pg_basebackup etc.)
# (if not provided, defaults to system $PATH)
pg_bindir=<%= node['postgresql']['bin_dir'] %>

# external command options

rsync_options=--archive --checksum --compress --progress --omit-link-times --rsh="ssh -o \"StrictHostKeyChecking no\""
ssh_options=-o "StrictHostKeyChecking=no"

# external command arguments

# pg_ctl_options='-s'
# pg_basebackup_options='--xlog-method=s'


# Standby clone settings
# ----------------------
#
# These settings apply when cloning a standby (`repmgr standby clone`).

# Tablespaces can be remapped from one file system location to another:
#
# tablespace_mapping=/path/to/original/tablespace=/path/to/new/tablespace


# Failover settings (repmgrd)
# ---------------------------
#
# These settings are only applied when repmgrd is running.

# How many seconds we wait for master response before declaring master failure
master_response_timeout=60

# How many time we try to reconnect to master before starting failover procedure
reconnect_attempts=6
reconnect_interval=10

# Autofailover options
failover=automatic  # one of 'automatic', 'manual'
priority=100        # a value of zero or less prevents the node being promoted to master
promote_command='<%= node['postgresql']['bin_dir'] %>/repmgr standby promote -f <%= node['postgresql-cluster']['repmgr']['conf_file'] %>'
follow_command='<%= node['postgresql']['bin_dir'] %>/repmgr standby follow -f <%= node['postgresql-cluster']['repmgr']['conf_file'] %>'

# monitoring interval; default is 2s
#
# monitor_interval_secs=2

# change wait time for master; before we bail out and exit when the master
# disappears, we wait 'reconnect_attempts' * 'retry_promote_interval_secs'
# seconds; by default this would be half an hour, as 'retry_promote_interval_secs'
# default value is 300)
#
# retry_promote_interval_secs=300
